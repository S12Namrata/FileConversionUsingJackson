package format_conversion.services;

import java.util.ArrayList;
import java.util.List;

import format_conversion.datamodel.Colour;
import format_conversion.datamodel.Error;
import format_conversion.datamodel.Reference;
import format_conversion.datamodel.Report;
import format_conversion.utils.Validations;

/**
 * The Class FileToPOJO.
 */
public class FileToPOJO {

	/**
	 * Creates the report object.
	 *
	 * @param fileData the file data
	 * @param fileName the file name
	 * @return the report
	 */
	public Report createReportObject(List<String> fileData, String fileName)
	{
		String seperator = ";";
		Boolean isError = Boolean.FALSE;

		Validations validations = new Validations();

		Report report = new Report(); // Creating report object
		report.setInputFile(fileName); // Setting input file name

		List<Reference> listOfReferences = new ArrayList<Reference>(); // Creating list of references
		report.setReferences(listOfReferences); // setting list of references
		List<Error> listOfErrors = new ArrayList<Error>(); // Creating list of errors
		report.setErrors(listOfErrors); // setting list of errors

		Reference ref;
		Error er;

		for (String line : fileData)
		{
			String[] inputs = line.split(seperator);

			if(inputs != null && inputs.length == 4) 
			{
				isError = Boolean.FALSE;
				ref = new Reference();
				ref.setNumReference(inputs[0]);

				/*
				 * checking if Colour is valid; 
				 * if valid setting in the reference object;
				 * else create error for invalid colour found in line
				 * 
				 */
				if(validations.validateColour(inputs[1]))
				{
					Colour colour = Colour.valueOf(inputs[1]);
					ref.setColour(colour);
				}
				else {

					er = new Error();
					er.setLine(String.valueOf(fileData.indexOf(line)+1));
					er.setMessage("Incorrect Value for Colour");
					er.setValue(line);
					listOfErrors.add(er);
					isError = Boolean.TRUE;
				}

				/*
				 * checking if Price is in correct format; 
				 * if valid setting in the reference object;
				 * else create error for invalid price format found in line
				 * 
				 */
				if(validations.validatePrice(inputs[2]))
				{
					ref.setPrice(inputs[2]);
				}
				else {

					er = new Error();
					er.setLine(String.valueOf(fileData.indexOf(line)+1));
					er.setMessage("Incorrect Value for Prize");
					er.setValue(line);
					listOfErrors.add(er);
					isError = Boolean.TRUE;
				}

				if(validations.validateSize(inputs[3]))
				{
					ref.setSize(inputs[3]);
				}
				else {

					er = new Error();
					er.setLine(String.valueOf(fileData.indexOf(line)+1));
					er.setMessage("Incorrect Value for Size");
					er.setValue(line);
					listOfErrors.add(er);
					isError = Boolean.TRUE;
				}


				if(!isError)
					listOfReferences.add(ref);
			}	
			else 
			{
				er = new Error();
				er.setLine(String.valueOf(fileData.indexOf(line)+1));
				er.setValue(line);
				if(inputs == null)
				{
					er.setMessage("Missing seperator");
				}
				else if(inputs.length != 4)
				{
					er.setMessage("Data Missing");

				}

				listOfErrors.add(er);
			}


		}

		return report;
	}
}
